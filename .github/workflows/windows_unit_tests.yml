name: MHKiT-MATLAB Windows Unit Tests

on:
  push:
    branches: [ master, develop, ebbflood ]
  pull_request:
    branches: [ master, develop, ebbflood ]

jobs:
  main:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: [3.9, "3.10", 3.11]
        mat_release: [latest]
    runs-on: ${{ matrix.os }}

    env:
      mhkit-python-dir: 'MHKiT-Python'
    steps:
    
      - name: Install/Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: mhkit
          channels: conda-forge
          
      - name: "Conda install h5py, netcdf4, and cython"
        run: conda install -c conda-forge h5py netcdf4 cython
      
      - name: Output python executable
        run: python -c "import sys; print(sys.executable)"

      - name: Print Python Version
        run: python --version

      - name: Check out MHKiT-MATLAB
        uses: actions/checkout@v4

      - name: Check out MHKiT-Python
        uses: actions/checkout@v4
        with:
          repository: 'MHKiT-Software/MHKiT-Python'
          path: ${{env.mhkit-python-dir}}

      - name: pip install mhkit from source
        # pip install mhkit --only-binary=:all:
        run: "pip install -e ."
        working-directory: ${{env.mhkit-python-dir}}

      - name: pip install mhkit-python-utils module from source
        run: pip install -e .

      - name: List installed pip modules
        run: pip freeze

      # Note, does not work, fails with error: RuntimeError: MATLAB installation not found in Windows Registry: [WinError 2] The system cannot find the file specified
      # - name: Install MATLAB Engine API for Python on Windows
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: python -m pip install matlabengine==9.14.3
      # run: "pip3 install matlabengine --only-binary=:all:"

      # - name: Test MHKiT-Python
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: |
      #     pip install nose pytest
      #     nosetests -v --traverse-namespace mhkit
      #   working-directory: ${{env.mhkit-python-dir}}
      # #   if: always() && steps.runTests.outcome == 'failure'

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1
        with:
          release: ${{ matrix.mat_release }}

      # OutOfProcess is what we probably need (seems to work locally), but there are MATLAB issues: See Run #79
      - name: Configure MATLAB pyenv Version and ExecutionMode
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: > 
          "pyenv(Version='{0}', ExecutionMode='InProcess')" -f (python -c "import sys; print(sys.executable)") | Out-File -FilePath run.m

      - name: Add MATLAB test commands
        shell: bash
        run: echo "version, 
                   addpath(genpath('mhkit')), 
                   import matlab.unittest.TestSuite, 
                   import matlab.unittest.TestRunner, 
                   testFolder = ['mhkit' filesep 'tests'], 
                   suite = TestSuite.fromFolder(testFolder), 
                   runner = TestRunner.withTextOutput,
                   results = runner.run(suite), 
                   assertSuccess(results)" >> run.m

      - name: Output Run.m
        shell: bash
        run: cat run.m

      - name: Run MHKiT-MATLAB Unit Tests
        uses: matlab-actions/run-command@v1
        with:
          command: run
          startup-options: -noFigureWindows
      
     