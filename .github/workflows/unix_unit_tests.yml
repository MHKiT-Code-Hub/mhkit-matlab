name: MHKiT-MATLAB Unix Unit Tests

on:
  push:
    branches: [ master, develop, ebbflood ]
  pull_request:
    branches: [ master, develop, ebbflood ]

jobs:
  main:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        # python-version: [3.8, 3.9, 3.10, 3.11]
        python-version: [3.9]
        mat_release: [latest]
        # include:
        #   - os: ubuntu-latest
        #     mat_release: R2021a
    runs-on: ${{ matrix.os }}
    env:
      mhkit-python-dir: 'MHKiT-Python'
    steps:
      # - name:  Brew install h5py and netcdf4 on MacOS
      #   run:   |
      #          if [ "$RUNNER_OS" == "macOS" ]; then
      #             brew install hdf5
      #             export HDF5_DIR="$(brew --prefix hdf5)"
      #             brew install netcdf
      #          fi
      #   shell: bash

      # - name:  Install h5py and netcdf4 on Linux
      #   run:   |
      #          if [ "$RUNNER_OS" == "Linux" ]; then
      #             brew install hdf5
      #             brew install netcdf
      #          fi
      #   shell: bash

      - name: Python Unix Setup - Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print Python executable
        run: python -c "import sys; print(sys.executable)"

      - name: Print Python Version
        run: python --version

      - name: Check out MHKiT-MATLAB
        uses: actions/checkout@v4

      - name: Check out MHKiT-Python
        uses: actions/checkout@v4
        with:
          repository: 'MHKiT-Software/MHKiT-Python'
          path: ${{env.mhkit-python-dir}}

      # For some reason it seems like the hdf5py wheel build needs this
      - name: Install numpy on MacOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: "pip install numpy"
        

      # - name: Install mhkit module from source with only binaries
      #   if: ${{ matrix.os != 'macos-latest' }}
      #   # pip install mhkit --only-binary=:all:
      #   run: "pip install -e ."
      #   working-directory: ${{env.mhkit-python-dir}}

        # This works!
      - name: Install mhkit module from pip
        # if: ${{ matrix.os == 'macos-latest' }}
        # pip install mhkit --only-binary=:all:
        run: "pip install mhkit"
        working-directory: ${{env.mhkit-python-dir}}

      - name: Install mhkit-python-utils module
        run: pip install -e .


      - name: List installed pip modules
        run: pip freeze
       
      
      # - name: Import and verify MHKiT operations
      #   run: "python -c 'import mhkit; [ED, AP] = mhkit.river.performance.circular(30); print(ED); print(AD);'"

      # - name: Output MHKiT-Python version
      #   run: python -c "import mhkit; print(mhkit.__version__)"

      # - name: Output MHKiT-Python Location
      #   run: python3 -c "import mhkit; import os; print(os.path.dirname(mhkit.__file__))"

      # - name: Test MHKiT-Python
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: |
      #     pip install nose pytest
      #     nosetests -v --traverse-namespace mhkit
      #   working-directory: ${{env.mhkit-python-dir}}
      # #   if: always() && steps.runTests.outcome == 'failure'

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1
        with:
          release: ${{ matrix.mat_release }}

      

      # - name: Set up MATLAB
      #   uses: matlab-actions/setup-matlab@v1
      #   with:
      #     release: ${{ matrix.mat_release }}git

    #   - name: Output matlab pyenv
    #     uses: matlab-actions/run-command@v1
    #     with:
    #       command: pyenv
    #       startup-options: -noFigureWindows

    #   - name: Output python version
    #     run: python -c "import sys; print(sys.executable)"

      # - name: Setup MATLAB pyversion
      #   shell: bash
      #   run: echo -n "pyversion('/usr/bin/python')" > setup_matlab.m
      # - name: Setup MATLAB pyversion
      #   shell: bash
      #   run: printf 'pyversion("%s")\n' $(python -c "import sys; print(sys.executable)") > setup_matlab.m

      # - name: Setup MATLAB pyversion
      #   shell: bash
      #   run: printf 'pyversion("%s")\n' $(python -c "import sys; print(sys.executable)") > run.m

      # - name: Setup MATLAB python through pyenv
      #   shell: bash
      #   run: printf 'pyenv(Version="%s")\n' $(python -c "import sys; print(sys.executable)") > run.m

      # - name: Setup MATLAB python through pyenv
      #   shell: bash
      #   run: echo 'pyenv(Version="C:\Miniconda\envs\mhkit\python.exe", ExecutionMode="InProcess")' > run.m
      #   if: ${{ matrix.os == 'windows-latest' }}

      # OutOfProcess errors with See Run #79
    #   - name: Pass Anaconda Python Executable to MATLAB
    #     if: ${{ matrix.os == 'windows-latest' }}
    #     shell: pwsh
    #     run: > 
    #       "pyenv(Version='{0}', ExecutionMode='InProcess')" -f (python -c "import sys; print(sys.executable)") | Out-File -FilePath run.m

      # - name: Append MATLAB pyversion
      #   shell: bash
      #   run:  python -c "import sys; print(sys.executable)" >> setup_matlab.m

      # - name: Finish MATLAB pyversion
      #   shell: bash
      #   run:  echo -n "')" >> setup_matlab.m
        
      # - name: Output MATLAB pyversion raw
      #   shell: bash
      #   run: cat setup_matlab.m

      # - name: Setup MATLAB python
      #   shell: bash
      #   run: matlab -batch "setup_matlab"
      # - name: Pass system Python executable to MATLAB
      #   uses: matlab-actions/run-command@v1
      #   with:
      #     command: setup_matlab
      #     startup-options: -noFigureWindows

      # - name: Output matlab pyenv again
      #   run: matlab -batch "pyenv"
      # - name: Output matlab pyenv again
      #   uses: matlab-actions/run-command@v1
      #   with:
      #     command: pyenv
      #     startup-options: -noFigureWindows

      # OutOfProcess allows MATLAB python to access libraries that use Cython (h5py).
      # So far, this is necessary on linux, more investigation is needed on MacOS
      - name: Set MATLAB OutOfProcess Python execution mode
        shell: bash
        run: echo "pyenv('ExecutionMode', 'OutOfProcess')" >> run.m
        if: ${{ matrix.os == 'ubuntu-latest' }}

      # - name: Set MATLAB OutOfProcess Python execution mode
      #   shell: bash
      #   run: echo "pyenv('ExecutionMode', 'OutOfProcess')" > run.m
      # #   if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Add MATLAB test commands
        shell: bash
        run: echo "version, 
                   addpath(genpath('mhkit')), 
                   import matlab.unittest.TestSuite, 
                   import matlab.unittest.TestRunner, 
                   testFolder = ['mhkit' filesep 'tests'], 
                   suite = TestSuite.fromFolder(testFolder), 
                   runner = TestRunner.withTextOutput,
                   results = runner.run(suite), 
                   assertSuccess(results)" >> run.m

      - name: Output Run.m
        shell: bash
        run: cat run.m

      # - name: Install and test MHKiT-MATLAB
      #   id: runTests
      #   run: matlab -batch "run"

      - name: Run MATLAB Unit Tests
        uses: matlab-actions/run-command@v1
        with:
          command: run
          startup-options: -noFigureWindows

      # - name: Test MHKiT-Python
      #   run: |
      #     pip install nose pytest
      #     nosetests -v --traverse-namespace mhkit
      #   working-directory: ${{env.mhkit-python-dir}}
      #   if: always() && steps.runTests.outcome == 'failure'
      
     