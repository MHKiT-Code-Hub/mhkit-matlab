name: Unit Tests

on:
  push:
    branches: [ master, develop, ebbflood ]
  pull_request:
    branches: [ master, develop, ebbflood ]

jobs:
  main:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # os: [ubuntu-latest]
        # python-version: [3.8, 3.9, 3.10, 3.11]
        python-version: [3.9]
        mat_release: [latest]
        # include:
        #   - os: ubuntu-latest
        #     mat_release: R2021a
    runs-on: ${{ matrix.os }}
    env:
      mhkit-python-dir: 'MHKiT-Python'
    steps:
      # - name:  Install h5py and netcdf4 on macos
      #   run:   |
      #          if [ "$RUNNER_OS" == "macOS" ]; then
      #             brew install hdf5
      #             brew install netcdf
      #          fi
      #   shell: bash

      # - name:  Install h5py and netcdf4 on Linux
      #   run:   |
      #          if [ "$RUNNER_OS" == "Linux" ]; then
      #             brew install hdf5
      #             brew install netcdf
      #          fi
      #   shell: bash

      # Install anaconda?
      - name: Install/Setup Miniconda
        if: ${{ matrix.os == 'windows-latest' }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          # auto-update-conda: true
          # python-version: ${{ matrix.python-version }}
          activate-environment: mhkit
          python-version: 3.9
          channels: conda-forge
          
      - name: Install h5py
        if: ${{ matrix.os == 'windows-latest' }}
        run: conda install h5py
  
      - name: Install netcdf4
        if: ${{ matrix.os == 'windows-latest' }}
        run: conda install -c conda-forge netcdf4

      # - name: Activate Anaconda Environment
      #   run: source activate mhkit

      # - name:  Activate Anaconda Environment
      #   run:   |
      #          if [ "$RUNNER_OS" != "Windows" ]; then
      #           conda init bash
      #           exec bash
      #           conda activate mhkit
      #          fi
      #   shell: bash
      

      # - name:  Install h5py and netcdf4 on macos
      #   run:   |
      #          if [ "$RUNNER_OS" != "macOS" ]; then
      #           brew install h
      #          fi
      #   shell: bash

      # - name: Conda info
      #   shell: bash -el {0}
      #   run: conda info
      # - name: Conda list
      #   shell: pwsh
      #   run: conda list

      # - name: Conda list environments
      #   run: conda env list
      

      # - name: Python where
      #   shell: bash
      #   run: which python

      # - name: Python where
      #   run: where python

      # - name: Activate Anaconda
      #   run: conda activate mhkit

      - name: Output python executable
        run: python -c "import sys; print(sys.executable)"

      - name: Print Python Version
        run: python --version

      

      # Does this do anything
      - name: Check out MHKiT-MATLAB
        uses: actions/checkout@v2

      - name: Check out MHKiT-Python
        uses: actions/checkout@v2
        with:
          repository: 'MHKiT-Software/MHKiT-Python'
          path: ${{env.mhkit-python-dir}}

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1
        with:
          release: ${{ matrix.mat_release }}

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: ${{ matrix.python-version }}

      - name: Output python version
        run: python -c "import sys; print(sys.executable)"

      - name: Install mhkit module from source
        # pip install mhkit --only-binary=:all:
        run: "pip3 install -e ."
        working-directory: ${{env.mhkit-python-dir}}

      - name: Install mhkit-python-utils module
        run: pip3 install -e .

      - name: Output MHKiT-Python version
        run: python -c "import mhkit; print(mhkit.__version__)"

      - name: Output MHKiT-Python Location
        run: python -c "import mhkit; import os; print(os.path.dirname(mhkit.__file__))"

      # - name: Set MATLAB OutOfProcess Python execution mode
      #   shell: bash
      #   run: echo "pyenv('ExecutionMode', 'OutOfProcess')" > run.m
      #   if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Output matlab pyenv
        uses: matlab-actions/run-command@v1
        with:
          command: pyenv
          startup-options: -noFigureWindows

      - name: Output python version
        run: python -c "import sys; print(sys.executable)"

      # - name: Setup MATLAB pyversion
      #   shell: bash
      #   run: echo -n "pyversion('/usr/bin/python')" > setup_matlab.m
      - name: Setup MATLAB pyversion
        shell: bash
        run: printf 'pyversion("%s")\n' $(python -c "import sys; print(sys.executable)") > setup_matlab.m

      # - name: Append MATLAB pyversion
      #   shell: bash
      #   run:  python -c "import sys; print(sys.executable)" >> setup_matlab.m

      # - name: Finish MATLAB pyversion
      #   shell: bash
      #   run:  echo -n "')" >> setup_matlab.m
        
      - name: Output MATLAB pyversion raw
        shell: bash
        run: cat setup_matlab.m

      # - name: Setup MATLAB python
      #   shell: bash
      #   run: matlab -batch "setup_matlab"
      - name: Output matlab pyenv again
        uses: matlab-actions/run-command@v1
        with:
          command: setup_matlab
          startup-options: -noFigureWindows

      # - name: Output matlab pyenv again
      #   run: matlab -batch "pyenv"
      # - name: Output matlab pyenv again
      #   uses: matlab-actions/run-command@v1
      #   with:
      #     command: pyenv
      #     startup-options: -noFigureWindows

      - name: Set MATLAB OutOfProcess Python execution mode
        shell: bash
        run: echo "pyenv('ExecutionMode', 'OutOfProcess')" > run.m
        # if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Add MATLAB test commands
        shell: bash
        run: echo "version, 
                   addpath(genpath('mhkit')), 
                   import matlab.unittest.TestSuite, 
                   import matlab.unittest.TestRunner, 
                   testFolder = ['mhkit' filesep 'tests'], 
                   suite = TestSuite.fromFolder(testFolder), 
                   runner = TestRunner.withTextOutput,
                   results = runner.run(suite), 
                   assertSuccess(results)" >> run.m

      # - name: Install and test MHKiT-MATLAB
      #   id: runTests
      #   run: matlab -batch "run"

      - name: Run command
        uses: matlab-actions/run-command@v1
        with:
          command: run
          startup-options: -noFigureWindows

      # - name: Test MHKiT-Python
      #   run: |
      #     pip install nose pytest
      #     nosetests -v --traverse-namespace mhkit
      #   working-directory: ${{env.mhkit-python-dir}}
      #   if: always() && steps.runTests.outcome == 'failure'
      
     