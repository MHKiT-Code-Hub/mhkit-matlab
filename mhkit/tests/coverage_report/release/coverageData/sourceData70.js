var sourceData70 = {"FileName":"/Users/asimms/Desktop/Programming/mhkit_matlab_simms_dev/MHKiT-MATLAB/mhkit/river/IO/delft_3d/delft_3d_calculate_turbulent_intensity.m","RawFileContents":["function result_struct = delft_3d_calculate_turbulent_intensity(delft_3d_py_object, points, intermediate_values)","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%","% Returns the turbulent intensity percentage for a given data set for the specified points.","%","% Parameters","% ------------","%    delft_3d_py_object: py.netCDF4._netCDF4.Dataset","%       A netCDF python object.","%    points: string or DataFrame","%       Points to interpolate data onto.","%            'cells': interpolates all data onto velocity coordinate system (Default).","%            'faces': interpolates all data onto the TKE coordinate system.","%            DataFrame of x, y, and z coordinates: Interpolates data onto user","%            provided points.","%    intermediate_values: bool (optional)","%       If false, the function will return position and turbulent intensity values.","%       If true, the function will return position (x, y, z) and values needed to calculate","%       turbulent intensity (ucx, ucy, uxz, and turkin1) in a DataFrame. Default is false.","%","% Returns","% ---------","%    result_struct: struct","%        A struct containing the calculated turbulent intensity data.","%","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","","    if ~isa(delft_3d_py_object, 'py.netCDF4._netCDF4.Dataset')","        error('MATLAB:delft_3d_calculate_turbulent_intensity:InvalidInput', 'Input must be a py.netCDF4._netCDF4.Dataset object.');","    end","","    if ~(isstring(points) || isa(points, 'py.pandas.core.frame.DataFrame'))","        error('MATLAB:delft_3d_calculate_turbulent_intensity:InvalidInput', 'Points must be a string or a DataFrame.');","    end","","    if ~islogical(intermediate_values)","        error('MATLAB:delft_3d_calculate_turbulent_intensity:InvalidInput', 'Intermediate values must be a boolean.');","    end","","    % Call Python function to calculate turbulent intensity","    python_result = py.mhkit.river.io.d3d.turbulent_intensity(delft_3d_py_object, pyargs('points', points,'intermediate_values', intermediate_values));","","    % Convert Python dataframe to struct","    df = python_result;","    result_struct = convert_numeric_dataframe_to_struct(df);","    result_struct.df = df;","end",""],"CoverageDisplayDataPerLine":{"Function":{"LineNumber":1,"Hits":1,"StartColumnNumbers":0,"EndColumnNumbers":112,"ContinuedLine":false},"Statement":[{"LineNumber":29,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":62,"ContinuedLine":false},{"LineNumber":30,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":131,"ContinuedLine":false},{"LineNumber":33,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":75,"ContinuedLine":false},{"LineNumber":34,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":119,"ContinuedLine":false},{"LineNumber":37,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":38,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":118,"ContinuedLine":false},{"LineNumber":42,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":151,"ContinuedLine":false},{"LineNumber":45,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":46,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":60,"ContinuedLine":false},{"LineNumber":47,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":26,"ContinuedLine":false}]}}