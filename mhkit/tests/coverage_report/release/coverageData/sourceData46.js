var sourceData46 = {"FileName":"/Users/asimms/Desktop/Programming/mhkit_matlab_simms_dev/MHKiT-MATLAB-2/mhkit/power/characteristics/ac_power_three_phase.m","RawFileContents":["function P=ac_power_three_phase(voltage,current,power_factor,varargin)","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%","%     Calculates the real power from three phase ac voltage and current.","%","% Parameters","% ------------","%    voltage: Time series of all three measured voltages [V]","%        Pandas data frame","%           To make a pandas data frame from user supplied frequency and spectra","%           use py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(time,voltage)","%","%        OR","%","%        structure of form:","%           voltage.voltage : matrix of all three phases","%","%           voltage.time : time vector","%","%    current: Time series of all three measured current [A]","%         Pandas data frame","%           To make a pandas data frame from user supplied frequency and spectra","%           use py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(time,current)","%","%        OR","%","%        structure of form:","%           current.current : matrix of all three phases","%","%           current.time : time vector","%","%     power_factor : float","%         power factor for the system","%","%     line_to_line: bool (Optional)","%         set true if the given voltage measurement is line_to_line","%","% Returns","% ---------","%     P: Structure","%","%","%       P.power [W]","%","%       P.time","%","%","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","","py.importlib.import_module('mhkit');","","py.importlib.import_module('mhkit_python_utils');","","if (isa(voltage,'py.pandas.core.frame.DataFrame')~=1)","    if (isstruct(voltage)==1)","        x=size(voltage.voltage);","        li=py.list();","        if x(2)==3","            for i = 1:x(2)","                app=py.list(double(voltage.voltage(:,i)));","                li=py.mhkit_python_utils.pandas_dataframe.lis(li,app);","","            end","            voltage=py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(double(voltage.time(:,1)),li,int32(x(2)));","        elseif x(2)==1","            ME = MException('MATLAB:ac_power_three_phase','Three lines of voltage measurements are required');","            throw(ME);","        end","","    else","        ME = MException('MATLAB:ac_power_three_phase','voltage needs to be a structure or Pandas dataframe, use py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas to create one or a structure');","        throw(ME);","    end","end","","if (isa(current,'py.pandas.core.frame.DataFrame')~=1)","    if (isstruct(current)==1)","        x=size(current.current);","        li=py.list();","        if x(2)==3","            for i = 1:x(2)","                app=py.list(double(current.current(:,i)));","                li=py.mhkit_python_utils.pandas_dataframe.lis(li,app);","","            end","            current=py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(double(current.time(:,1)),li,int32(x(2)));","        elseif x(2)==1","            ME = MException('MATLAB:ac_power_three_phase','Three lines of voltage measurements are required');","            throw(ME);","        end","","    else","        ME = MException('MATLAB:ac_power_three_phase','voltage needs to be a structure or Pandas dataframe, use py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas to create one or a structure');","        throw(ME);","    end","end","","if nargin == 4","    p_pd=py.mhkit.power.characteristics.ac_power_three_phase(voltage,current,power_factor,pyargs('line_to_line',varargin{1}));","elseif nargin ==3","    p_pd=py.mhkit.power.characteristics.ac_power_three_phase(voltage,current,power_factor);","else","    ME = MException('MATLAB:ac_power_three_phase','incorrect number of input arguments');","    throw(ME);","end","","P.power=double(py.array.array('d',py.numpy.nditer(p_pd.values)));","P.time=double(py.array.array('d',py.numpy.nditer(p_pd.index)));","",""],"CoverageDisplayDataPerLine":{"Function":{"LineNumber":1,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":70,"ContinuedLine":false},"Statement":[{"LineNumber":51,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":53,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":49,"ContinuedLine":false},{"LineNumber":55,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":53,"ContinuedLine":false},{"LineNumber":56,"Hits":4,"StartColumnNumbers":4,"EndColumnNumbers":29,"ContinuedLine":false},{"LineNumber":57,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":58,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":59,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":60,"Hits":4,"StartColumnNumbers":12,"EndColumnNumbers":26,"ContinuedLine":false},{"LineNumber":61,"Hits":12,"StartColumnNumbers":16,"EndColumnNumbers":58,"ContinuedLine":false},{"LineNumber":62,"Hits":12,"StartColumnNumbers":16,"EndColumnNumbers":70,"ContinuedLine":false},{"LineNumber":65,"Hits":4,"StartColumnNumbers":12,"EndColumnNumbers":119,"ContinuedLine":false},{"LineNumber":66,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":22,"ContinuedLine":false},{"LineNumber":67,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":110,"ContinuedLine":false},{"LineNumber":68,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":22,"ContinuedLine":false},{"LineNumber":72,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":200,"ContinuedLine":false},{"LineNumber":73,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":77,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":53,"ContinuedLine":false},{"LineNumber":78,"Hits":4,"StartColumnNumbers":4,"EndColumnNumbers":29,"ContinuedLine":false},{"LineNumber":79,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":80,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":81,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":82,"Hits":4,"StartColumnNumbers":12,"EndColumnNumbers":26,"ContinuedLine":false},{"LineNumber":83,"Hits":12,"StartColumnNumbers":16,"EndColumnNumbers":58,"ContinuedLine":false},{"LineNumber":84,"Hits":12,"StartColumnNumbers":16,"EndColumnNumbers":70,"ContinuedLine":false},{"LineNumber":87,"Hits":4,"StartColumnNumbers":12,"EndColumnNumbers":119,"ContinuedLine":false},{"LineNumber":88,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":22,"ContinuedLine":false},{"LineNumber":89,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":110,"ContinuedLine":false},{"LineNumber":90,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":22,"ContinuedLine":false},{"LineNumber":94,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":200,"ContinuedLine":false},{"LineNumber":95,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":99,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":100,"Hits":4,"StartColumnNumbers":4,"EndColumnNumbers":126,"ContinuedLine":false},{"LineNumber":101,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":102,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":91,"ContinuedLine":false},{"LineNumber":104,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":89,"ContinuedLine":false},{"LineNumber":105,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":108,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":65,"ContinuedLine":false},{"LineNumber":109,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":63,"ContinuedLine":false}]}}