var sourceData171 = {"FileName":"/Users/asimms/Desktop/Programming/mhkit_matlab_simms_dev/MHKiT-MATLAB-2/mhkit/wave/resource/surface_elevation.m","RawFileContents":["function wave_elevation=surface_elevation(S,time_index,options)","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%   Calculates wave elevation time series from spectrum using a random phase","%","% Parameters","% ------------","%    S: Spectral Density (m^2/Hz)","%       Pandas data frame","%           To make a pandas data frame from user supplied frequency and spectra","%           use py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(frequency,spectra)","%","%       OR","%","%       structure of form:","%           S.spectrum: Spectral Density (m^2/Hz)","%","%           S.type: String of the spectra type, i.e. Bretschneider,","%           time series, date stamp etc.","%","%           S.frequency: frequency (Hz)","%","%    time_index: array","%        Time used to create the wave elevation time series [s]","%","%    seed: Int (optional)","%        random seed","%        to call: wave_elevation(S,time_index,\"seed\",seed)","%","%    frequency_bins: vector (optional)","%       Bin widths for frequency of S. Required for unevenly sized bins","%       to call: wave_elevation(S,time_index,\"frequency_bins\",frequency_bins)","%","%    phases: vector or matrix (optional)","%       Explicit phases for frequency components (overrides seed)","%       to call: wave_elevation(S,time_index,\"phases\",phases)","%","% Returns","% ---------","%    wave_elevation: structure","%","%","%         wave_elevation.elevation: Wave surface elevation (m)","%","%         wave_elevation.type: 'Time Series from Spectra'","%","%         wave_elevation.time","%","%","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","arguments","    S","    time_index","    options.seed {mustBeNumeric} = 123;","    options.frequency_bins = py.None;","    options.phases = py.None;","end","","py.importlib.import_module('mhkit');","% py.importlib.import_module('numpy');","py.importlib.import_module('mhkit_python_utils');","","frequency= S.frequency ;","","if (isa(time_index,'py.numpy.ndarray') ~= 1)","","    time_index = py.numpy.array(time_index);","","end","","if (isa(S,'py.pandas.core.frame.DataFrame')~=1)","    if (isstruct(S)==1)","        x=size(S.spectrum);","        li=py.list();","        if x(2)>1","            for i = 1:x(2)","                app=py.list(S.spectrum(:,i));","                li=py.mhkit_python_utils.pandas_dataframe.lis(li,app);","","            end","            S=py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(frequency(:,1),li,int32(x(2)));","        elseif x(2)==1","            S=py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(py.list(frequency),py.numpy.array(S.spectrum),int32(x(2)));","        end","    else","        ME = MException('MATLAB:significant_wave_height','S needs to be a structure or Pandas dataframe, use py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas to create one');","        throw(ME);","    end","end","","if (isa(options.frequency_bins,'py.NoneType')~=1)","    if isnumeric(options.frequency_bins)","","        options.frequency_bins = py.numpy.array(options.frequency_bins);","    else","        ME = MException('MATLAB:significant_wave_height','frequency_bins need to be of numeric type');","        throw(ME);","    end","end","","if (isa(options.phases,'py.NoneType')~=1)","    if isnumeric(options.phases)","     x=size(options.phases);","     li=py.list();","     if x(2)>1","         for i = 1:x(2)","             app=py.list(options.phases(:,i));","             li=py.mhkit_python_utils.pandas_dataframe.lis(li,app);","","         end","         options.phases=py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(frequency(:,1),li,int32(x(2)));","      elseif x(2)==1","         options.phases=py.mhkit_python_utils.pandas_dataframe.spectra_to_pandas(py.list(frequency),py.numpy.array(options.phases),int32(x(2)));","     end","","    else","        ME = MException('MATLAB:significant_wave_height','phases need to be of numeric type');","        throw(ME);","    end","","end","","eta=py.mhkit.wave.resource.surface_elevation(S,time_index,pyargs('seed',...","    py.int(options.seed),'frequency_bins',options.frequency_bins,'phases',options.phases));","","","vals=double(py.array.array('d',py.numpy.nditer(eta.values)));"," sha=cell(eta.values.shape);"," x=int64(sha{1,1});"," y=int64(sha{1,2});"," vals=reshape(vals,[x,y]);","","si=size(vals);","","wave_elevation.elevation=vals;","% for i=1:si(2)","%    wave_elevation.spectrum{i}=vals(:,i);","% end","","wave_elevation.type='Time Series from Spectra';","","wave_elevation.time=double(py.array.array('d',py.numpy.nditer(eta.index)));","",""],"CoverageDisplayDataPerLine":{"Function":{"LineNumber":1,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":63,"ContinuedLine":false},"Statement":[{"LineNumber":54,"Hits":[5,4],"StartColumnNumbers":[18,35],"EndColumnNumbers":[31,38],"ContinuedLine":false},{"LineNumber":55,"Hits":5,"StartColumnNumbers":29,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":56,"Hits":4,"StartColumnNumbers":21,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":59,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":61,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":49,"ContinuedLine":false},{"LineNumber":63,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":24,"ContinuedLine":false},{"LineNumber":65,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":44,"ContinuedLine":false},{"LineNumber":67,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":44,"ContinuedLine":false},{"LineNumber":71,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":72,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":73,"Hits":5,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":false},{"LineNumber":74,"Hits":5,"StartColumnNumbers":8,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":75,"Hits":5,"StartColumnNumbers":8,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":76,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":26,"ContinuedLine":false},{"LineNumber":77,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":78,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":70,"ContinuedLine":false},{"LineNumber":81,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":102,"ContinuedLine":false},{"LineNumber":82,"Hits":5,"StartColumnNumbers":8,"EndColumnNumbers":22,"ContinuedLine":false},{"LineNumber":83,"Hits":5,"StartColumnNumbers":12,"EndColumnNumbers":130,"ContinuedLine":false},{"LineNumber":86,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":182,"ContinuedLine":false},{"LineNumber":87,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":91,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":49,"ContinuedLine":false},{"LineNumber":92,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":40,"ContinuedLine":false},{"LineNumber":94,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":72,"ContinuedLine":false},{"LineNumber":96,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":102,"ContinuedLine":false},{"LineNumber":97,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":101,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":102,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":103,"Hits":1,"StartColumnNumbers":5,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":104,"Hits":1,"StartColumnNumbers":5,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":105,"Hits":1,"StartColumnNumbers":5,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":106,"Hits":0,"StartColumnNumbers":9,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":107,"Hits":0,"StartColumnNumbers":13,"EndColumnNumbers":46,"ContinuedLine":false},{"LineNumber":108,"Hits":0,"StartColumnNumbers":13,"EndColumnNumbers":67,"ContinuedLine":false},{"LineNumber":111,"Hits":0,"StartColumnNumbers":9,"EndColumnNumbers":112,"ContinuedLine":false},{"LineNumber":112,"Hits":1,"StartColumnNumbers":6,"EndColumnNumbers":20,"ContinuedLine":false},{"LineNumber":113,"Hits":1,"StartColumnNumbers":9,"EndColumnNumbers":144,"ContinuedLine":false},{"LineNumber":117,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":94,"ContinuedLine":false},{"LineNumber":118,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":123,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":71,"ContinuedLine":false},{"LineNumber":124,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":91,"ContinuedLine":true},{"LineNumber":127,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":128,"Hits":5,"StartColumnNumbers":1,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":129,"Hits":5,"StartColumnNumbers":1,"EndColumnNumbers":19,"ContinuedLine":false},{"LineNumber":130,"Hits":5,"StartColumnNumbers":1,"EndColumnNumbers":19,"ContinuedLine":false},{"LineNumber":131,"Hits":5,"StartColumnNumbers":1,"EndColumnNumbers":26,"ContinuedLine":false},{"LineNumber":133,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":135,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":140,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":142,"Hits":5,"StartColumnNumbers":0,"EndColumnNumbers":75,"ContinuedLine":false}]}}