var sourceData68 = {"FileName":"/Users/asimms/Desktop/Programming/mhkit_matlab_simms_dev/MHKiT-MATLAB-2/mhkit/qc/check_timestamp.m","RawFileContents":["function results = check_timestamp(data, freq, options)","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%    Check time series for missing, non-monotonic, and duplicate timestamps","%","% Parameters","% ------------","%","%     data: pandas dataframe or qcdata structure","%          Pandas dataframe indexed by datetime (use","%          py.mhkit_python_utils.pandas_dataframe.timeseries_to_pandas(ts,time,x))","%","%          OR","%","%          qcdata structure of form:","%","%             data.values: 2D array of doubles with arbitrary number of columns","%","%             data.time:   1D array of datetimes or posix times","%","%     freq: int","%         Expected time series frequency, in seconds","%","%     expected_start_time: Timestamp (optional)","%         Expected start time in datetime format.  Default: None","%         to call: check_timestamp(data,freq,\"expected_start_time\",expected_start_time)","%","%     expected_end_time: Timestamp (optional)","%         Expected end time in datetime format.  Default: None","%         to call: check_timestamp(data,freq,\"expected_end_time\",expected_end_time)","%","%     min_failures: int (optional)","%         Minimum number of consecutive failures required for reporting,","%         default = 1","%         to call: check_timestamp(data,freq,\"min_failures\",min_failures)","%","%     exact_times: logical (optional)","%         If py.True, times are expected to occur at regular intervals","%         (specified by freq) and data is reindexed to match expected frequency","%         If py.False, times only need to occur once or more within each interval","%         (specified by freq) and data is not reindexed","%         to call: check_timestamp(data,freq,\"exact_times\",exact_times)","%","% Returns","% ---------","%     results: qcdata structure of form:","%","%         results.values: array of doubles","%            Same shape as input data.values","%            Elements that failed QC test replaced with NaN","%","%         results.mask: array of int64","%            Same shape as input data.values","%            Logical mask of QC results (1 = passed, 0 = failed QC test)","%","%         results.time: array of datetimes","%            Same as input times (possibly reindexed by exact_times)","%","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","","arguments","    data","    freq","    options.expected_start_time = py.None;","    options.expected_end_time = py.None;","    options.min_failures = 1;","    options.exact_times = py.True;","end"," py.importlib.import_module('pecos');"," py.importlib.import_module('pandas');","","  % check to see if a pandas dataframe or not","  if (isa(data,'py.pandas.core.frame.DataFrame')~=1)","    data=qc_data_to_dataframe(data);","  end","","  if options.expected_start_time ~= py.None","      options.expected_start_time = py.pandas.to_datetime(options.expected_start_time);","  end","","  if options.expected_end_time ~= py.None","      options.expected_end_time = py.pandas.to_datetime(options.expected_end_time);","  end","","","r = struct(py.pecos.monitoring.check_timestamp(data,freq,..."," \t      pyargs(\"expected_start_time\",options.expected_start_time,...","          \"expected_end_time\",options.expected_end_time,\"min_failures\",...","          int32(options.min_failures),\"exact_times\",options.exact_times)));","","  % Convert to qcdata structure","  results.values=double(r.cleaned_data.values);","  results.mask=int64(r.mask.values);","","  % Extract time from index, convert to posix then datetime","  ptime = double(py.array.array('d',py.numpy.nditer(r.cleaned_data.index.values)))/1e9;","  results.time=datetime(ptime,'ConvertFrom','posix');","","end","",""],"CoverageDisplayDataPerLine":{"Function":{"LineNumber":1,"Hits":1,"StartColumnNumbers":0,"EndColumnNumbers":55,"ContinuedLine":false},"Statement":[{"LineNumber":64,"Hits":1,"StartColumnNumbers":34,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":65,"Hits":1,"StartColumnNumbers":32,"EndColumnNumbers":39,"ContinuedLine":false},{"LineNumber":66,"Hits":1,"StartColumnNumbers":27,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":67,"Hits":1,"StartColumnNumbers":26,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":69,"Hits":1,"StartColumnNumbers":1,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":70,"Hits":1,"StartColumnNumbers":1,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":73,"Hits":1,"StartColumnNumbers":2,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":74,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":77,"Hits":1,"StartColumnNumbers":2,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":78,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":87,"ContinuedLine":false},{"LineNumber":81,"Hits":1,"StartColumnNumbers":2,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":82,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":83,"ContinuedLine":false},{"LineNumber":86,"Hits":1,"StartColumnNumbers":0,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":87,"Hits":1,"StartColumnNumbers":8,"EndColumnNumbers":64,"ContinuedLine":true},{"LineNumber":88,"Hits":1,"StartColumnNumbers":10,"EndColumnNumbers":70,"ContinuedLine":true},{"LineNumber":89,"Hits":1,"StartColumnNumbers":10,"EndColumnNumbers":75,"ContinuedLine":true},{"LineNumber":92,"Hits":1,"StartColumnNumbers":2,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":93,"Hits":1,"StartColumnNumbers":2,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":96,"Hits":1,"StartColumnNumbers":2,"EndColumnNumbers":87,"ContinuedLine":false},{"LineNumber":97,"Hits":1,"StartColumnNumbers":2,"EndColumnNumbers":53,"ContinuedLine":false}]}}