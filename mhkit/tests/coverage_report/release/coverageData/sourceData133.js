var sourceData133 = {"FileName":"/Users/asimms/Desktop/Programming/mhkit_matlab_simms_dev/MHKiT-MATLAB-2/mhkit/wave/IO/CDIP/cdip_request_parse_workflow.m","RawFileContents":["function [data] = cdip_request_parse_workflow(options)","","%CDIP_REQUEST_PARSE_WORKFLOW Parses CDIP data from a web request","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%   Requests data for a station number (from http://cdip.ucsd.edu/) and","%   parses. Years may be non-consecutive e.g. [2001, 2010]. Time may be","%   sliced by dates (start_date or end date in YYYY-MM-DD). By default 2D","%   variables are not parsed if all 2D variables are needed.","%","%   Parameters","%   ----------","%       station_number: string","%           Station number of CDIP wave buoy","%       parameters: string or array of strings","%           Parameters to return. If nan, will return all variables except","%           2D-variables.","%       years: int or array of int","%           Year date, e.g. 2001 or [2001, 2010]","%       start_date: string","%           Start date in YYYY-MM-DD, e.g. '2012-04-01'","%       end_date: string","%           End date in YYYY-MM-DD, e.g. '2012-04-30'","%       data_type: string","%           Either 'historic' or 'realtime'","%       all_2D_variables: boolean","%           Will return all 2D data. Enabling this will add significant","%           processing time. If all 2D variables are not needed it is","%           recommended to pass 2D parameters of interest using the","%           'parameters' keyword and leave this set to the default false.","%","%   Returns","%   -------","%       data: structure","%           'data': structure","%               grouped 1D and 2D structures of array data with datetimes","%           'metadata': structure","%               Anything not of length time, including buoy name","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","","arguments","    options.station_number string;","    options.parameters (1,:) string = \"\";","    options.years (1,:) {mustBeInteger} = -1;","    options.start_date string = \"\";","    options.end_date string = \"\";","    options.data_type string {mustBeMember( ...","        options.data_type, {'historic','realtime'})} = \"historic\";","    options.all_2D_variables logical = false;","end","","DATA_GROUPS = {'wave', 'sst', 'gps', 'dwr', 'meta'};","","% Build URL to query","url_query = get_url_query(options);","","% Query info on buoy and available data (can't return all vars like Python)","% converted to table to query like: nc_info.Variables{'waveTime', 'Size'}{1};","nc_info = ncinfo_autoretry(url_query);","nc_info.Variables = struct2table(nc_info.Variables);","nc_info.Variables.Properties.RowNames = nc_info.Variables.Name;","","% Build list of data to query","data_to_query = make_data_list(options, nc_info, DATA_GROUPS);","","% Create list of start and end datetimes/indices for which to query data","datetimes = start_end_datetimes(options);","indices = data_indices(url_query, datetimes, data_to_query, DATA_GROUPS);","","% Query data and compile into output structure","for i = 1:length(data_to_query)                     % for each data metric","    name = data_to_query{i};","    [type, group, shape] = datum_categories(name, nc_info, DATA_GROUPS);","    if shape == \"2D\"","        group_name = strcat(group, '2D');","    else","        group_name = group;","    end","","    if type ~= \"data\" || shape == \"0D\"","        % Query it all and add to output","        try","            value = ncread_autoretry(url_query, name);","            data.(type).(group_name).(name) = value;","        catch","            warning(\"MATLAB:cdip_request_parse_workflow\", ...","                    \"Data name '%s' not found.\", name);","        end","    elseif type == \"data\" && (shape == \"2D\" || shape == \"1D\")","        % number of group time ranges within desired time ranges, if any","        if isfield(indices, group)","            N_time_ranges = length(indices.(group).start);","        else","            N_time_ranges = 0;","        end","","        for j = 1:N_time_ranges","            % Query data","            index_start = indices.(group).start(j);","            index_end = indices.(group).end(j);","            index_count = index_end - index_start + 1;","            try","                if shape == \"2D\"","                    value = ncread_autoretry(url_query, name, ...","                                   [1, index_start], [Inf, index_count]);","                    value = value';","                elseif shape == \"1D\"","                    value = ncread_autoretry(url_query, name, ...","                                   index_start, index_count);","                end","            catch ME","                if ME.identifier == \"MATLAB:imagessci:netcdf:libraryFailure\"","                    warning(\"MATLAB:cdip_request_parse_workflow\", ...","                            \"Access failure to NetCDF file when querying %s.\", name);","                else","                    warning(\"MATLAB:cdip_request_parse_workflow\", ...","                            \"Data name '%s' not found.\", name);","                end","                continue;","            end","","            % Convert any times","            if endsWith(name, 'Time')","                value = datetime(value, ...","                                 'ConvertFrom', 'posixtime', ...","                                 'TimeZone', 'UTC');","            end","","            % Try adding to existing output field, else create new","            try","                value_in_output = data.(type).(group_name).(name);","                data.data.(group_name).(name) = ...","                    cat(1, value_in_output, value);     % add rows","            catch","                data.(type).(group_name).(name) = value;","            end","        end","    end","end","","% Add buoy name to output","data.metadata.name = deblank(convertCharsToStrings( ...","    ncread_autoretry(url_query, 'metaStationName')));","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function group = data_group(data_name, all_groups)","%DATA_GROUP Returns the group name for the data based on its name","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","group = 'other';","for i = 1:length(all_groups)","    if startsWith(data_name, all_groups{i})     % group is the prefix","        group = all_groups{i};","        break","    end","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function groups = data_groups(data_names, all_groups)","%DATA_GROUPS Returns the group set in data_names based on its names","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","% Groups are non-duplicate. Definitely not most efficient algorithm.","wrapper_fun = @(x) data_group(x, all_groups);","group_of_each = cellfun(wrapper_fun, data_names, ...","                           'UniformOutput', false);","groups = unique(group_of_each);","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function indices = data_indices(url_query, datetime_ranges, ...","                                data_to_query, all_groups)","%DATA_INDICES Returns data indices to query for each group and range","% e.g.,  indices.wave.start = <index>","%        indices.wave.end = <index>","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","groups_in_data = data_groups(data_to_query, all_groups);","","indices = struct;","for i = 1:length(groups_in_data)","    posixtimes = ncread_autoretry( ...","            url_query, strcat(groups_in_data{i}, 'Time'));","    if isscalar(posixtimes) && isnan(posixtimes)","        continue","    end","","    datetimes = datetime(posixtimes, ...","                         'ConvertFrom', 'posixtime', ...","                         'TimeZone', 'UTC');","    for j = 1:length(datetime_ranges.start)     % for each range","        index_start = find(datetimes>=datetime_ranges.start{j}, 1, 'first');","        index_end = find(datetimes<=datetime_ranges.end{j}, 1, 'last');","","        if ~isempty(index_start) && ~isempty(index_end)","            indices.(groups_in_data{i}).start(j) = index_start;","            indices.(groups_in_data{i}).end(j) = index_end;","        end","    end","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function [type, group, shape] = datum_categories(datum_name, nc_info, all_groups)","%DATUM_CATEGORIES Returns the categorizations for the datum","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","% type = {'data', 'metadata'}","% group = {'wave', 'sst', 'gps', 'dwr', 'other'}","% shape = {'0D', '1D', '2D'}","","% Determine group","group = data_group(datum_name, all_groups);","","% Determine shape","size = nc_info.Variables{datum_name, 'Size'}{1};","datatype = nc_info.Variables{datum_name, 'Datatype'}{1};","if length(size) == 2","    shape = '2D';","elseif length(size) == 1 && size(1) > 1 && ...","        datatype ~= \"char\" && datatype ~= \"string\"","    shape = '1D';","else","    shape = '0D';","end","","% Determine type","try","    time_length = nc_info.Variables{strcat(group, 'Time'), 'Size'}{1};","    if group ~= \"other\" && size(end) == time_length","        type = 'data';","    else","        type = 'metadata';","    end","catch","    type = 'metadata';      % if there is no '..Time' metric in group","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function data_2D_names = find_data_2D_names(nc_info)","%FIND_DATA_2D_NAMES Finds names of available 2D data","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","N_freq = nc_info.Variables{'waveFrequency', 'Size'}{1};","N_time = nc_info.Variables{'waveTime', 'Size'}{1};","data_2D_names = {};","for i = 1:height(nc_info.Variables)","    if isequal(nc_info.Variables.Size{i}, [N_freq, N_time])","        data_2D_names{end+1} = nc_info.Variables.Name{i};","    end","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function url_query = get_url_query(options)","%GET_URL_QUERY Builds the URL for querying the netCDF data","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","data_url = \"http://thredds.cdip.ucsd.edu/thredds/dodsC/cdip\";","if options.data_type == \"historic\"","    url_query = sprintf(\"%s/archive/%sp1/%sp1_historic.nc\", ...","                        data_url, ...","                        options.station_number, ...","                        options.station_number);","elseif options.data_type == \"realtime\"","    url_query = sprintf(\"%s/realtime/%sp1_rt.nc\", ...","                        data_url, ...","                        options.station_number);","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function data_to_query = make_data_list(options, nc_info, DATA_GROUPS)","%MAKE_DATA_LIST Compiles list of data to query","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","","data_2D_names = find_data_2D_names(nc_info);","","if options.parameters ~= \"\"               % if data to query is specified","    % Exclude non-existent parameters","    data_to_query = intersect( ...","        options.parameters, ...","        nc_info.Variables.Properties.RowNames);","    % Warn on non-existent parameters","    data_not_available = setdiff( ...","        options.parameters, ...","        nc_info.Variables.Properties.RowNames);","    for i=1:length(data_not_available)","        warning(\"MATLAB:cdip_request_parse_workflow\", ...","                    \"Data name '%s' not found.\", data_not_available(i));","    end","    % Add all 2D variables, if requested","    if options.all_2D_variables == true","        data_to_query = union(data_to_query, data_2D_names);","    end","    % Add 'waveFrequency' if there's any 2D data queried","    if any(ismember(data_to_query, data_2D_names))","        data_to_query = union(data_to_query, 'waveFrequency');","    end","    % Add timestamps for each data group","    groups_in_data = data_groups(data_to_query, DATA_GROUPS);","    groups_in_data = setdiff(groups_in_data, 'meta'); % omit 'meta'","    data_to_query = union(data_to_query, strcat(groups_in_data, 'Time'));","else                            % else query all data except maybe 2D data","    data_to_query = nc_info.Variables.Name';","    if options.all_2D_variables == false","        data_to_query = setdiff(data_to_query, data_2D_names);  % remove 2D","    end","end","data_to_query = sort(data_to_query);","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function info = ncinfo_autoretry(source, name)","%NCINFO_AUTORETRY Query info and auto retry until success or max tries met","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","MAX_RETRIES = 5;                         % number of query retries if error","","% Submit query and get info","for i = 0:MAX_RETRIES","    try","        switch nargin","            case 1","                info = ncinfo(source);","            case 2","                info = ncinfo(source, name);","            otherwise","                MException('MATLAB:cdip_request_parse_workflow:ncinfo_autoretry ', ...","                    'Invalid number of arguments');","        end","        break;","    catch ME","        if i == MAX_RETRIES","            rethrow(ME)","        else","            pause(0.5);   % pause(seconds) and retry query","        end","    end","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function data = ncread_autoretry(source, varname, start, count, stride)","%NCREAD_AUTORETRY Query data and auto retry until success or max tries met","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","MAX_RETRIES = 5;                         % number of query retries if error","","% Submit query and get info","for i = 0:MAX_RETRIES","    try","        switch nargin","            case 2","%                 data = ncread(source, varname);","                data = ncread_lowlevel(source, varname);","            case 4","%                 data = ncread(source, varname, start, count);","                data = ncread_lowlevel(source, varname, start, count);","            case 5","%                 data = ncread(source, varname, start, count, stride);","                data = ncread_lowlevel(source, varname, start, count, stride);","            otherwise","                MException('MATLAB:cdip_request_parse_workflow:ncread_autoretry ', ...","                    'Invalid number of arguments');","        end","        break;","    catch ME","        if i == MAX_RETRIES","            rethrow(ME)","        elseif ME.identifier == \"MATLAB:imagesci:netcdf:unknownLocation\" || ...","                contains(ME.message, \"Variable not found\")","            data = NaN;","            break;          % no need to retry","        else","            pause(0.5);     % pause(seconds) and retry query","        end","    end","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function data = ncread_lowlevel(source, varname, start, count, stride)","%NCREAD_LOWLEVEL Query data using low-level NetCDF functions","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","ncid = netcdf.open(source);","","try","    varid = netcdf.inqVarID(ncid, varname);","","    % Replace any inf's for reading to end with actual counts","    if nargin > 2 && any(isinf(count))","        [~, ~, dimids, ~] = netcdf.inqVar(ncid,varid);","        for i=1:length(count)","            if isinf(count(i))","                [~, dimlen] = netcdf.inqDim(ncid, dimids(i));","                count(i) = dimlen - start(i) + 1;","            end","        end","    end","","    % Submit query and get info","    switch nargin","        case 2","            data = netcdf.getVar(ncid, varid);","        case 4","            data = ncread(source, varname, start, count);","        case 5","            data = ncread(source, varname, start, count, stride);","        otherwise","            MException('MATLAB:cdip_request_parse_workflow:ncread_autoretry ', ...","                'Invalid number of arguments');","    end","","    netcdf.close(ncid);","catch ME","    netcdf.close(ncid);","    rethrow(ME)","end","end","","","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","function datetimes = start_end_datetimes(options)","%START_END_DATETIMES Creates structure of start and end datetimes to query","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","datetimes.start = {};","datetimes.end = {};","if options.years(1) > 0     % invalid/missing value = -1","    % Formulate start and end dates from years parameter","    for i = 1:length(options.years)","        datetimes.start{end+1} = datetime(options.years(i), 1, 1, 0, 0, 0, ...","                                          'TimeZone', 'UTC');","        datetimes.end{end+1} = datetime(options.years(i), 12, 31, 23, 59, 59, ...","                                        'TimeZone', 'UTC');","    end","else","    % If start or end date is needed, query times from the netCDF data","    if options.start_date == \"\" && options.end_date == \"\"","        url_query = get_url_query(options);","        waveTime = ncread_autoretry(url_query, 'waveTime');","    end","    % Substitute in netCDF start/end dates as needed","    if options.start_date ~= \"\"","        datetimes.start{1} = datetime(options.start_date, ...","                                      'InputFormat', 'yyyy-MM-dd', ...","                                      'TimeZone', 'UTC');","    else","        datetimes.start{1} = datetime(waveTime(1), ...","                                      'ConvertFrom', 'posixtime', ...","                                      'TimeZone', 'UTC');","    end","    if options.end_date ~= \"\"","        datetimes.end{1} = datetime(options.end_date, ...","                                    'InputFormat', 'yyyy-MM-dd', ...","                                    'TimeZone', 'UTC');","        datetimes.end{1}.Hour = 23;","        datetimes.end{1}.Minute = 59;","        datetimes.end{1}.Second = 59;","    else","        datetimes.end{1} = datetime(waveTime(end), ...","                                    'ConvertFrom', 'posixtime', ...","                                    'TimeZone', 'UTC');","    end","end","end","",""],"CoverageDisplayDataPerLine":{"Function":[{"LineNumber":1,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":54,"ContinuedLine":false},{"LineNumber":147,"Hits":280,"StartColumnNumbers":0,"EndColumnNumbers":50,"ContinuedLine":false},{"LineNumber":161,"Hits":14,"StartColumnNumbers":0,"EndColumnNumbers":53,"ContinuedLine":false},{"LineNumber":173,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":63,"ContinuedLine":false},{"LineNumber":174,"Hits":8,"StartColumnNumbers":32,"EndColumnNumbers":58,"ContinuedLine":true},{"LineNumber":206,"Hits":132,"StartColumnNumbers":0,"EndColumnNumbers":81,"ContinuedLine":false},{"LineNumber":243,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":258,"Hits":9,"StartColumnNumbers":0,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":276,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":70,"ContinuedLine":false},{"LineNumber":318,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":46,"ContinuedLine":false},{"LineNumber":348,"Hits":157,"StartColumnNumbers":0,"EndColumnNumbers":71,"ContinuedLine":false},{"LineNumber":387,"Hits":157,"StartColumnNumbers":0,"EndColumnNumbers":70,"ContinuedLine":false},{"LineNumber":428,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":49,"ContinuedLine":false}],"Statement":[{"LineNumber":42,"Hits":2,"StartColumnNumbers":38,"EndColumnNumbers":40,"ContinuedLine":false},{"LineNumber":43,"Hits":[8,3],"StartColumnNumbers":[25,42],"EndColumnNumbers":[38,44],"ContinuedLine":false},{"LineNumber":44,"Hits":6,"StartColumnNumbers":32,"EndColumnNumbers":34,"ContinuedLine":false},{"LineNumber":45,"Hits":6,"StartColumnNumbers":30,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":46,"Hits":8,"StartColumnNumbers":30,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":47,"Hits":[8,7],"StartColumnNumbers":[8,55],"EndColumnNumbers":[51,65],"ContinuedLine":false},{"LineNumber":48,"Hits":4,"StartColumnNumbers":39,"EndColumnNumbers":44,"ContinuedLine":false},{"LineNumber":51,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":54,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":58,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":59,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":60,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":63,"ContinuedLine":false},{"LineNumber":63,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":62,"ContinuedLine":false},{"LineNumber":66,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":67,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":73,"ContinuedLine":false},{"LineNumber":70,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":71,"Hits":132,"StartColumnNumbers":4,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":72,"Hits":132,"StartColumnNumbers":4,"EndColumnNumbers":72,"ContinuedLine":false},{"LineNumber":73,"Hits":132,"StartColumnNumbers":4,"EndColumnNumbers":20,"ContinuedLine":false},{"LineNumber":74,"Hits":25,"StartColumnNumbers":8,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":76,"Hits":107,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":false},{"LineNumber":79,"Hits":132,"StartColumnNumbers":4,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":81,"Hits":34,"StartColumnNumbers":8,"EndColumnNumbers":11,"ContinuedLine":false},{"LineNumber":82,"Hits":34,"StartColumnNumbers":12,"EndColumnNumbers":54,"ContinuedLine":false},{"LineNumber":83,"Hits":34,"StartColumnNumbers":12,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":84,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":13,"ContinuedLine":false},{"LineNumber":85,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":86,"Hits":0,"StartColumnNumbers":20,"EndColumnNumbers":55,"ContinuedLine":true},{"LineNumber":88,"Hits":98,"StartColumnNumbers":4,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":90,"Hits":98,"StartColumnNumbers":8,"EndColumnNumbers":34,"ContinuedLine":false},{"LineNumber":91,"Hits":92,"StartColumnNumbers":12,"EndColumnNumbers":58,"ContinuedLine":false},{"LineNumber":93,"Hits":6,"StartColumnNumbers":12,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":96,"Hits":92,"StartColumnNumbers":8,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":98,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":51,"ContinuedLine":false},{"LineNumber":99,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":100,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":54,"ContinuedLine":false},{"LineNumber":101,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":15,"ContinuedLine":false},{"LineNumber":102,"Hits":96,"StartColumnNumbers":16,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":103,"Hits":22,"StartColumnNumbers":20,"EndColumnNumbers":60,"ContinuedLine":false},{"LineNumber":104,"Hits":22,"StartColumnNumbers":35,"EndColumnNumbers":73,"ContinuedLine":true},{"LineNumber":105,"Hits":22,"StartColumnNumbers":20,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":106,"Hits":74,"StartColumnNumbers":16,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":107,"Hits":74,"StartColumnNumbers":20,"EndColumnNumbers":60,"ContinuedLine":false},{"LineNumber":108,"Hits":74,"StartColumnNumbers":35,"EndColumnNumbers":61,"ContinuedLine":true},{"LineNumber":110,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":20,"ContinuedLine":false},{"LineNumber":111,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":76,"ContinuedLine":false},{"LineNumber":112,"Hits":0,"StartColumnNumbers":20,"EndColumnNumbers":64,"ContinuedLine":false},{"LineNumber":113,"Hits":0,"StartColumnNumbers":28,"EndColumnNumbers":85,"ContinuedLine":true},{"LineNumber":115,"Hits":0,"StartColumnNumbers":20,"EndColumnNumbers":64,"ContinuedLine":false},{"LineNumber":116,"Hits":0,"StartColumnNumbers":28,"EndColumnNumbers":63,"ContinuedLine":true},{"LineNumber":118,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":25,"ContinuedLine":false},{"LineNumber":122,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":123,"Hits":14,"StartColumnNumbers":16,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":124,"Hits":14,"StartColumnNumbers":33,"EndColumnNumbers":59,"ContinuedLine":true},{"LineNumber":125,"Hits":14,"StartColumnNumbers":33,"EndColumnNumbers":52,"ContinuedLine":true},{"LineNumber":129,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":15,"ContinuedLine":false},{"LineNumber":130,"Hits":96,"StartColumnNumbers":16,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":131,"Hits":4,"StartColumnNumbers":16,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":132,"Hits":4,"StartColumnNumbers":20,"EndColumnNumbers":51,"ContinuedLine":true},{"LineNumber":133,"Hits":92,"StartColumnNumbers":12,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":134,"Hits":92,"StartColumnNumbers":16,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":141,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":51,"ContinuedLine":false},{"LineNumber":142,"Hits":8,"StartColumnNumbers":4,"EndColumnNumbers":53,"ContinuedLine":true},{"LineNumber":150,"Hits":280,"StartColumnNumbers":0,"EndColumnNumbers":16,"ContinuedLine":false},{"LineNumber":151,"Hits":280,"StartColumnNumbers":0,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":152,"Hits":652,"StartColumnNumbers":4,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":153,"Hits":276,"StartColumnNumbers":8,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":154,"Hits":276,"StartColumnNumbers":8,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":165,"Hits":14,"StartColumnNumbers":0,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":166,"Hits":14,"StartColumnNumbers":0,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":167,"Hits":14,"StartColumnNumbers":27,"EndColumnNumbers":51,"ContinuedLine":true},{"LineNumber":168,"Hits":14,"StartColumnNumbers":0,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":179,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":181,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":182,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":183,"Hits":18,"StartColumnNumbers":4,"EndColumnNumbers":34,"ContinuedLine":false},{"LineNumber":184,"Hits":18,"StartColumnNumbers":12,"EndColumnNumbers":58,"ContinuedLine":true},{"LineNumber":185,"Hits":18,"StartColumnNumbers":4,"EndColumnNumbers":48,"ContinuedLine":false},{"LineNumber":186,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":189,"Hits":14,"StartColumnNumbers":4,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":190,"Hits":14,"StartColumnNumbers":25,"EndColumnNumbers":51,"ContinuedLine":true},{"LineNumber":191,"Hits":14,"StartColumnNumbers":25,"EndColumnNumbers":44,"ContinuedLine":true},{"LineNumber":192,"Hits":14,"StartColumnNumbers":4,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":193,"Hits":15,"StartColumnNumbers":8,"EndColumnNumbers":76,"ContinuedLine":false},{"LineNumber":194,"Hits":15,"StartColumnNumbers":8,"EndColumnNumbers":71,"ContinuedLine":false},{"LineNumber":196,"Hits":15,"StartColumnNumbers":8,"EndColumnNumbers":55,"ContinuedLine":false},{"LineNumber":197,"Hits":14,"StartColumnNumbers":12,"EndColumnNumbers":63,"ContinuedLine":false},{"LineNumber":198,"Hits":14,"StartColumnNumbers":12,"EndColumnNumbers":59,"ContinuedLine":false},{"LineNumber":214,"Hits":132,"StartColumnNumbers":0,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":217,"Hits":132,"StartColumnNumbers":0,"EndColumnNumbers":48,"ContinuedLine":false},{"LineNumber":218,"Hits":132,"StartColumnNumbers":0,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":219,"Hits":132,"StartColumnNumbers":0,"EndColumnNumbers":20,"ContinuedLine":false},{"LineNumber":220,"Hits":25,"StartColumnNumbers":4,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":221,"Hits":107,"StartColumnNumbers":0,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":222,"Hits":107,"StartColumnNumbers":8,"EndColumnNumbers":50,"ContinuedLine":true},{"LineNumber":223,"Hits":95,"StartColumnNumbers":4,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":225,"Hits":12,"StartColumnNumbers":4,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":229,"Hits":132,"StartColumnNumbers":0,"EndColumnNumbers":3,"ContinuedLine":false},{"LineNumber":230,"Hits":132,"StartColumnNumbers":4,"EndColumnNumbers":70,"ContinuedLine":false},{"LineNumber":231,"Hits":110,"StartColumnNumbers":4,"EndColumnNumbers":51,"ContinuedLine":false},{"LineNumber":232,"Hits":98,"StartColumnNumbers":8,"EndColumnNumbers":22,"ContinuedLine":false},{"LineNumber":234,"Hits":12,"StartColumnNumbers":8,"EndColumnNumbers":26,"ContinuedLine":false},{"LineNumber":236,"Hits":22,"StartColumnNumbers":0,"EndColumnNumbers":5,"ContinuedLine":false},{"LineNumber":237,"Hits":22,"StartColumnNumbers":4,"EndColumnNumbers":22,"ContinuedLine":false},{"LineNumber":246,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":55,"ContinuedLine":false},{"LineNumber":247,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":50,"ContinuedLine":false},{"LineNumber":248,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":19,"ContinuedLine":false},{"LineNumber":249,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":250,"Hits":480,"StartColumnNumbers":4,"EndColumnNumbers":59,"ContinuedLine":false},{"LineNumber":251,"Hits":80,"StartColumnNumbers":8,"EndColumnNumbers":57,"ContinuedLine":false},{"LineNumber":261,"Hits":9,"StartColumnNumbers":0,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":262,"Hits":9,"StartColumnNumbers":0,"EndColumnNumbers":34,"ContinuedLine":false},{"LineNumber":263,"Hits":9,"StartColumnNumbers":4,"EndColumnNumbers":58,"ContinuedLine":false},{"LineNumber":264,"Hits":9,"StartColumnNumbers":24,"EndColumnNumbers":32,"ContinuedLine":true},{"LineNumber":265,"Hits":9,"StartColumnNumbers":24,"EndColumnNumbers":46,"ContinuedLine":true},{"LineNumber":266,"Hits":9,"StartColumnNumbers":24,"EndColumnNumbers":48,"ContinuedLine":true},{"LineNumber":267,"Hits":0,"StartColumnNumbers":0,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":268,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":48,"ContinuedLine":false},{"LineNumber":269,"Hits":0,"StartColumnNumbers":24,"EndColumnNumbers":32,"ContinuedLine":true},{"LineNumber":270,"Hits":0,"StartColumnNumbers":24,"EndColumnNumbers":48,"ContinuedLine":true},{"LineNumber":280,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":44,"ContinuedLine":false},{"LineNumber":282,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":27,"ContinuedLine":false},{"LineNumber":284,"Hits":6,"StartColumnNumbers":4,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":285,"Hits":6,"StartColumnNumbers":8,"EndColumnNumbers":26,"ContinuedLine":true},{"LineNumber":286,"Hits":6,"StartColumnNumbers":8,"EndColumnNumbers":47,"ContinuedLine":true},{"LineNumber":288,"Hits":6,"StartColumnNumbers":4,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":289,"Hits":6,"StartColumnNumbers":8,"EndColumnNumbers":26,"ContinuedLine":true},{"LineNumber":290,"Hits":6,"StartColumnNumbers":8,"EndColumnNumbers":47,"ContinuedLine":true},{"LineNumber":291,"Hits":1,"StartColumnNumbers":4,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":292,"Hits":1,"StartColumnNumbers":8,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":293,"Hits":1,"StartColumnNumbers":20,"EndColumnNumbers":72,"ContinuedLine":true},{"LineNumber":296,"Hits":6,"StartColumnNumbers":4,"EndColumnNumbers":39,"ContinuedLine":false},{"LineNumber":297,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":60,"ContinuedLine":false},{"LineNumber":300,"Hits":6,"StartColumnNumbers":4,"EndColumnNumbers":50,"ContinuedLine":false},{"LineNumber":301,"Hits":2,"StartColumnNumbers":8,"EndColumnNumbers":62,"ContinuedLine":false},{"LineNumber":304,"Hits":6,"StartColumnNumbers":4,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":305,"Hits":6,"StartColumnNumbers":4,"EndColumnNumbers":53,"ContinuedLine":false},{"LineNumber":306,"Hits":6,"StartColumnNumbers":4,"EndColumnNumbers":73,"ContinuedLine":false},{"LineNumber":308,"Hits":2,"StartColumnNumbers":4,"EndColumnNumbers":44,"ContinuedLine":false},{"LineNumber":309,"Hits":2,"StartColumnNumbers":4,"EndColumnNumbers":40,"ContinuedLine":false},{"LineNumber":310,"Hits":1,"StartColumnNumbers":8,"EndColumnNumbers":62,"ContinuedLine":false},{"LineNumber":313,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":321,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":16,"ContinuedLine":false},{"LineNumber":324,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":325,"Hits":8,"StartColumnNumbers":4,"EndColumnNumbers":7,"ContinuedLine":false},{"LineNumber":326,"Hits":8,"StartColumnNumbers":8,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":327,"Hits":8,"StartColumnNumbers":12,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":328,"Hits":8,"StartColumnNumbers":16,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":329,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":330,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":44,"ContinuedLine":false},{"LineNumber":332,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":81,"ContinuedLine":false},{"LineNumber":333,"Hits":0,"StartColumnNumbers":20,"EndColumnNumbers":51,"ContinuedLine":true},{"LineNumber":335,"Hits":8,"StartColumnNumbers":8,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":336,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":12,"ContinuedLine":false},{"LineNumber":337,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":false},{"LineNumber":338,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":340,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":351,"Hits":157,"StartColumnNumbers":0,"EndColumnNumbers":16,"ContinuedLine":false},{"LineNumber":354,"Hits":157,"StartColumnNumbers":0,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":355,"Hits":157,"StartColumnNumbers":4,"EndColumnNumbers":7,"ContinuedLine":false},{"LineNumber":356,"Hits":157,"StartColumnNumbers":8,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":357,"Hits":157,"StartColumnNumbers":12,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":359,"Hits":61,"StartColumnNumbers":16,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":360,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":362,"Hits":96,"StartColumnNumbers":16,"EndColumnNumbers":70,"ContinuedLine":false},{"LineNumber":363,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":365,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":78,"ContinuedLine":false},{"LineNumber":367,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":81,"ContinuedLine":false},{"LineNumber":368,"Hits":0,"StartColumnNumbers":20,"EndColumnNumbers":51,"ContinuedLine":true},{"LineNumber":370,"Hits":153,"StartColumnNumbers":8,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":371,"Hits":4,"StartColumnNumbers":4,"EndColumnNumbers":12,"ContinuedLine":false},{"LineNumber":372,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":false},{"LineNumber":373,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":374,"Hits":4,"StartColumnNumbers":8,"EndColumnNumbers":74,"ContinuedLine":false},{"LineNumber":375,"Hits":4,"StartColumnNumbers":16,"EndColumnNumbers":58,"ContinuedLine":true},{"LineNumber":376,"Hits":4,"StartColumnNumbers":12,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":377,"Hits":4,"StartColumnNumbers":12,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":379,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":390,"Hits":157,"StartColumnNumbers":0,"EndColumnNumbers":27,"ContinuedLine":false},{"LineNumber":392,"Hits":157,"StartColumnNumbers":0,"EndColumnNumbers":3,"ContinuedLine":false},{"LineNumber":393,"Hits":157,"StartColumnNumbers":4,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":396,"Hits":153,"StartColumnNumbers":4,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":397,"Hits":22,"StartColumnNumbers":8,"EndColumnNumbers":54,"ContinuedLine":false},{"LineNumber":398,"Hits":22,"StartColumnNumbers":8,"EndColumnNumbers":29,"ContinuedLine":false},{"LineNumber":399,"Hits":44,"StartColumnNumbers":12,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":400,"Hits":22,"StartColumnNumbers":16,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":401,"Hits":22,"StartColumnNumbers":16,"EndColumnNumbers":49,"ContinuedLine":false},{"LineNumber":407,"Hits":153,"StartColumnNumbers":4,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":408,"Hits":153,"StartColumnNumbers":8,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":409,"Hits":57,"StartColumnNumbers":12,"EndColumnNumbers":46,"ContinuedLine":false},{"LineNumber":410,"Hits":96,"StartColumnNumbers":8,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":411,"Hits":96,"StartColumnNumbers":12,"EndColumnNumbers":57,"ContinuedLine":false},{"LineNumber":412,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":14,"ContinuedLine":false},{"LineNumber":413,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":65,"ContinuedLine":false},{"LineNumber":415,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":77,"ContinuedLine":false},{"LineNumber":416,"Hits":0,"StartColumnNumbers":16,"EndColumnNumbers":47,"ContinuedLine":true},{"LineNumber":419,"Hits":153,"StartColumnNumbers":4,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":420,"Hits":4,"StartColumnNumbers":0,"EndColumnNumbers":8,"ContinuedLine":false},{"LineNumber":421,"Hits":4,"StartColumnNumbers":4,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":422,"Hits":4,"StartColumnNumbers":4,"EndColumnNumbers":15,"ContinuedLine":false},{"LineNumber":431,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":21,"ContinuedLine":false},{"LineNumber":432,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":19,"ContinuedLine":false},{"LineNumber":433,"Hits":8,"StartColumnNumbers":0,"EndColumnNumbers":23,"ContinuedLine":false},{"LineNumber":435,"Hits":5,"StartColumnNumbers":4,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":436,"Hits":6,"StartColumnNumbers":8,"EndColumnNumbers":73,"ContinuedLine":false},{"LineNumber":437,"Hits":6,"StartColumnNumbers":42,"EndColumnNumbers":61,"ContinuedLine":true},{"LineNumber":438,"Hits":6,"StartColumnNumbers":8,"EndColumnNumbers":76,"ContinuedLine":false},{"LineNumber":439,"Hits":6,"StartColumnNumbers":40,"EndColumnNumbers":59,"ContinuedLine":true},{"LineNumber":443,"Hits":3,"StartColumnNumbers":4,"EndColumnNumbers":57,"ContinuedLine":false},{"LineNumber":444,"Hits":1,"StartColumnNumbers":8,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":445,"Hits":1,"StartColumnNumbers":8,"EndColumnNumbers":59,"ContinuedLine":false},{"LineNumber":448,"Hits":3,"StartColumnNumbers":4,"EndColumnNumbers":31,"ContinuedLine":false},{"LineNumber":449,"Hits":2,"StartColumnNumbers":8,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":450,"Hits":2,"StartColumnNumbers":38,"EndColumnNumbers":65,"ContinuedLine":true},{"LineNumber":451,"Hits":2,"StartColumnNumbers":38,"EndColumnNumbers":57,"ContinuedLine":true},{"LineNumber":453,"Hits":1,"StartColumnNumbers":8,"EndColumnNumbers":49,"ContinuedLine":false},{"LineNumber":454,"Hits":1,"StartColumnNumbers":38,"EndColumnNumbers":64,"ContinuedLine":true},{"LineNumber":455,"Hits":1,"StartColumnNumbers":38,"EndColumnNumbers":57,"ContinuedLine":true},{"LineNumber":457,"Hits":3,"StartColumnNumbers":4,"EndColumnNumbers":29,"ContinuedLine":false},{"LineNumber":458,"Hits":2,"StartColumnNumbers":8,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":459,"Hits":2,"StartColumnNumbers":36,"EndColumnNumbers":63,"ContinuedLine":true},{"LineNumber":460,"Hits":2,"StartColumnNumbers":36,"EndColumnNumbers":55,"ContinuedLine":true},{"LineNumber":461,"Hits":2,"StartColumnNumbers":8,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":462,"Hits":2,"StartColumnNumbers":8,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":463,"Hits":2,"StartColumnNumbers":8,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":465,"Hits":1,"StartColumnNumbers":8,"EndColumnNumbers":49,"ContinuedLine":false},{"LineNumber":466,"Hits":1,"StartColumnNumbers":36,"EndColumnNumbers":62,"ContinuedLine":true},{"LineNumber":467,"Hits":1,"StartColumnNumbers":36,"EndColumnNumbers":55,"ContinuedLine":true}]}}