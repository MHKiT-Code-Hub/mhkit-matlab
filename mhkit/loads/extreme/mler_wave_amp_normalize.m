function mler_norm = mler_wave_amp_normalize(wave_amp, mler, sim, k)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%     Function that renormalizes the incoming amplitude of the MLER wave
%     to the desired peak height (peak to MSL).
%
%     Parameters
%     ----------
%     wave_amp: float
%         Desired wave amplitude (peak to MSL).
%     mler: struct
%         MLER coefficients generated by 'mler_coefficients' function.
%     sim: struct
%         Simulation parameters formatted by output from
%         'mler_simulation'.
%     k: array
%         Wave number.
%
%     Returns
%     -------
%     mler_norm : struct
%         Normalized MLER coefficients
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% assert statements
if ~isa(wave_amp,'numeric')
    error('ERROR: wave_amp must be a float')
end
if ~isa(mler,'struct')
    error('ERROR: mler must be a struct')
end
if ~isa(sim,'struct')
    error('ERROR: sim must be a struct')
end
if ~isa(k,'numeric')
    error('ERROR: k must be an array')
end


freq = mler.frequency .* (2*pi);
dw = (max(freq) - min(freq)) / (length(freq)-1);

wave_amp_time = zeros(sim.maxIX, sim.maxIT);
for x=1:length(sim.X)
    for t=1:length(sim.T)
        wave_amp_time(x,t) = sum(sqrt(mler.conditioned_spectrum'.*2*dw) .* ...
            cos(freq'.*(sim.T(t)-sim.T0) - k.*(sim.X(x)-sim.X0) + mler.phase'));
    end
end

tmp_max_amp = max(max(abs(wave_amp_time)));

% renormalization of wave amplitudes
rescale_fact = abs(wave_amp) ./ abs(tmp_max_amp);
% rescale the wave spectral amplitude coefficients
spectrum = mler.conditioned_spectrum .* rescale_fact.^2;

% create outputs
mler_norm.conditioned_spectrum = spectrum;
mler_norm.phase = mler.phase;
mler_norm.frequency = mler.frequency;

end
